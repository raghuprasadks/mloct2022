https://github.com/raghuprasadks/mloct2022
Languages - Python or R
Python is a generic programming language
Easy to learn
Open source
Community driven

Python 
Building blocks
1. Data types 
Basic data types -Numeric,text, boolean
Advanced data types - list,tuple,dictionary,set
customer -
name,age,sex,address,pincode,mobile,email - KYC

download python.

https://www.python.org/downloads/
.py
python program

HelloWorld.py

Integrated Environment
1. Anaconda - 
Spyder
Jupyter notebook

Type google colab
google colab
https://colab.research.google.com/
1-DataTypes.ipynb
print("Hello World")
https://www.onlinegdb.com/
# Basic Data type str,int,float,bool
name="ravi"
age = 45
city= 'Bengaluru'
zipcode = 560001
anyCreditCard=True

print(name)
print('your name is ',name)
print('data type of name variable',type(name))

name=123
print('data type of name variable ',type(name))

balance=1000.99
print ('data type of balance ',type(balance))
print ('data type of anycredit card',type(anyCreditCard))

'''
list - []
tuple - ()
dictionary - {key:value}
set - {n1,n2,n3}
'''

#list - dynamic array, it allows duplicate values
customerlist = ['ravi','ganesh','gowri','abdul','alex']
print('customer list ',customerlist)
print('data type of customerlist ',type(customerlist))

#tuple - cannot modify once it is defined
days=('Mon','Tue','Wed')
print('data type of days',type(days))

#dictionary - {key:value} key should be unique
employee={101:'ramesh',102:'ravi',103:'ramya'}
print('employee ',employee)
print('employee data type ',type(employee))
#set - {n1,n2,n3} - it does not allow duplicate values
even={2,4,6,8,2}
print('even numbers',even)
print('type of even numbers',type(even))

2. Operators
Arithmetic operator - +,-,*,/,//,%
5/2 - 2.5
5//2 = 2
5%2 = 1
Comparision operator/Relational operator - >,<,>=,<=,==,!=
n1=100
n2=50
n1>n2
Logical operators
and or not
#logical operators

n1 = 100
n2=75
n3 = 150
result = (n1>n2) and (n3>n2)
print ('result of (n1>n2) and (n3>n2) ',result)
result = (n2>n1) or (n3>n2)
print ('result of (n2>n1) or (n3>n2) ',result)
result = not((n2>n1) or (n3>n2))
print ('result of not((n2>n1) or (n3>n2)) ',result)

Bitwise operators

3. Loops n conditional statements
while,for

'''
print 2's table using while loop
'''
start =2
end = 20
while (start <=end ):
  print(start)
  start = start +2
'''
20 to 2
20..18..16
'''

'''
for loop
'''
for i in range(10):
  print(i)

print("2's table in reverse order")
for i in range(2,21,2):
  print(i)
print('program completed')

conditional statement

'''
grade based on marks

marks >90 <=100 - A+
marks >80 <=90 - A
marks >70 <=80 - B+
'''
marks = 98
if (marks >90 and marks <=100):
  print('A+')
elif (marks >80 and marks <=90):
  print('A')
elif (marks >70 and marks <=80):
  print('B+')
else:
  print('less than B+')

4. Functions
def greet():
	print('Welcome to ML')

def add(n1,n2):
  result = n1+n2
  print(n1,' + ',n2,' = ',result)
add(100,150)
add(300,200)

'''
write a function to calculate simple interest
'''
def simpleInterest(p,r,t):
  si=(p*r*t)/100
  return si

si =simpleInterest(1000,4,2)
print("simple interest is ",si)

def simpleInterest(p,r,t):
  si=(p*r*t)/100
  print('si ',si)
simpleInterest(1000,4,1)
simpleInterest(2000,4,2)

'''
Write a function to calculate simple interest based on 
following condition

days <= 365, rate = 4%
days >365 <=500 rate = 5 %
days >500 rate = 6%

'''
def simpleInterest(p,t):
  r = 0
  if (t<=365):
    r = 4
  elif (t>365 and t<500):
    r = 5
  else:
    r = 6
  si = (p*r*t)/(365*100)
  return si
simpleInterest(10000,365)
simpleInterest(10000,400)
simpleInterest(10000,600)
Operator precedence - PEMDAS
P - parenthesis
E - Exponentiation
MDAS

5. Object oriented programming

class and object
class - template
object - instance

property and functionality

account
property/attribute
number
name
address
contanct
functionality

deposit
withdraw
tranfer
checkbal

class Account():
  '''
  attributes
  '''
  actnum=0
  name=''
  bal=0
  location = ''
  '''
  methods
  '''
  def openAccount(self,name,location):
    self.name = name
    self.location = location
    self.bal = 0
    self.actnum = 100
  
  def deposit(self,actnum,amttodep):
    self.bal = self.bal +amttodep
    return self.bal

  def withdraw(self,actnum,amttowithdraw):
    self.bal = self.bal -amttowithdraw
    return self.bal

  def checkbal (self,actnum):
    return self.bal

act1 = Account()
act1.openAccount('raghu prasad','bengaluru')
print ("your account number is ",act1.actnum)
actnum = act1.actnum
bal = act1.deposit(actnum,10000)
print('Balance after deposit of 10 k ',bal)
bal = act1.deposit(actnum,20000)
print('Balance after deposit of 20 k ',bal)
bal = act1.withdraw(actnum,5000)
print('Balance after withdraw of 5 k ',bal)
bal = act1.checkbal(actnum)
print('check balance ',bal)
  

Advanced python
Pandas - https://www.listendata.com/2017/12/python-pandas-tutorial.html

